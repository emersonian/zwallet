// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library fb;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Account {
  Account._(this._bc, this._bcOffset);
  factory Account(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Account> reader = _AccountReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get balance => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'Account{id: ${id}, name: ${name}, balance: ${balance}}';
  }

  AccountT unpack() => AccountT(
      id: id,
      name: name,
      balance: balance);

  static int pack(fb.Builder fbBuilder, AccountT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AccountT implements fb.Packable {
  int id;
  String? name;
  int balance;

  AccountT({
      this.id = 0,
      this.name,
      this.balance = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, id);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addUint64(2, balance);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AccountT{id: ${id}, name: ${name}, balance: ${balance}}';
  }
}

class _AccountReader extends fb.TableReader<Account> {
  const _AccountReader();

  @override
  Account createObject(fb.BufferContext bc, int offset) => 
    Account._(bc, offset);
}

class AccountBuilder {
  AccountBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addBalance(int? balance) {
    fbBuilder.addUint64(2, balance);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _name;
  final int? _balance;

  AccountObjectBuilder({
    int? id,
    String? name,
    int? balance,
  })
      : _id = id,
        _name = name,
        _balance = balance;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addUint64(2, _balance);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AccountVec {
  AccountVec._(this._bc, this._bcOffset);
  factory AccountVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AccountVec> reader = _AccountVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Account>? get accounts => const fb.ListReader<Account>(Account.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'AccountVec{accounts: ${accounts}}';
  }

  AccountVecT unpack() => AccountVecT(
      accounts: accounts?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, AccountVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AccountVecT implements fb.Packable {
  List<AccountT>? accounts;

  AccountVecT({
      this.accounts});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? accountsOffset = accounts == null ? null
        : fbBuilder.writeList(accounts!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, accountsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AccountVecT{accounts: ${accounts}}';
  }
}

class _AccountVecReader extends fb.TableReader<AccountVec> {
  const _AccountVecReader();

  @override
  AccountVec createObject(fb.BufferContext bc, int offset) => 
    AccountVec._(bc, offset);
}

class AccountVecBuilder {
  AccountVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addAccountsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountVecObjectBuilder extends fb.ObjectBuilder {
  final List<AccountObjectBuilder>? _accounts;

  AccountVecObjectBuilder({
    List<AccountObjectBuilder>? accounts,
  })
      : _accounts = accounts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? accountsOffset = _accounts == null ? null
        : fbBuilder.writeList(_accounts!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, accountsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Balance {
  Balance._(this._bc, this._bcOffset);
  factory Balance(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Balance> reader = _BalanceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get shielded => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get unconfirmedSpent => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get balance => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get underConfirmed => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get excluded => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get sapling => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get orchard => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 16, 0);

  @override
  String toString() {
    return 'Balance{shielded: ${shielded}, unconfirmedSpent: ${unconfirmedSpent}, balance: ${balance}, underConfirmed: ${underConfirmed}, excluded: ${excluded}, sapling: ${sapling}, orchard: ${orchard}}';
  }

  BalanceT unpack() => BalanceT(
      shielded: shielded,
      unconfirmedSpent: unconfirmedSpent,
      balance: balance,
      underConfirmed: underConfirmed,
      excluded: excluded,
      sapling: sapling,
      orchard: orchard);

  static int pack(fb.Builder fbBuilder, BalanceT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class BalanceT implements fb.Packable {
  int shielded;
  int unconfirmedSpent;
  int balance;
  int underConfirmed;
  int excluded;
  int sapling;
  int orchard;

  BalanceT({
      this.shielded = 0,
      this.unconfirmedSpent = 0,
      this.balance = 0,
      this.underConfirmed = 0,
      this.excluded = 0,
      this.sapling = 0,
      this.orchard = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addUint64(0, shielded);
    fbBuilder.addUint64(1, unconfirmedSpent);
    fbBuilder.addUint64(2, balance);
    fbBuilder.addUint64(3, underConfirmed);
    fbBuilder.addUint64(4, excluded);
    fbBuilder.addUint64(5, sapling);
    fbBuilder.addUint64(6, orchard);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'BalanceT{shielded: ${shielded}, unconfirmedSpent: ${unconfirmedSpent}, balance: ${balance}, underConfirmed: ${underConfirmed}, excluded: ${excluded}, sapling: ${sapling}, orchard: ${orchard}}';
  }
}

class _BalanceReader extends fb.TableReader<Balance> {
  const _BalanceReader();

  @override
  Balance createObject(fb.BufferContext bc, int offset) => 
    Balance._(bc, offset);
}

class BalanceBuilder {
  BalanceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addShielded(int? shielded) {
    fbBuilder.addUint64(0, shielded);
    return fbBuilder.offset;
  }
  int addUnconfirmedSpent(int? unconfirmedSpent) {
    fbBuilder.addUint64(1, unconfirmedSpent);
    return fbBuilder.offset;
  }
  int addBalance(int? balance) {
    fbBuilder.addUint64(2, balance);
    return fbBuilder.offset;
  }
  int addUnderConfirmed(int? underConfirmed) {
    fbBuilder.addUint64(3, underConfirmed);
    return fbBuilder.offset;
  }
  int addExcluded(int? excluded) {
    fbBuilder.addUint64(4, excluded);
    return fbBuilder.offset;
  }
  int addSapling(int? sapling) {
    fbBuilder.addUint64(5, sapling);
    return fbBuilder.offset;
  }
  int addOrchard(int? orchard) {
    fbBuilder.addUint64(6, orchard);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BalanceObjectBuilder extends fb.ObjectBuilder {
  final int? _shielded;
  final int? _unconfirmedSpent;
  final int? _balance;
  final int? _underConfirmed;
  final int? _excluded;
  final int? _sapling;
  final int? _orchard;

  BalanceObjectBuilder({
    int? shielded,
    int? unconfirmedSpent,
    int? balance,
    int? underConfirmed,
    int? excluded,
    int? sapling,
    int? orchard,
  })
      : _shielded = shielded,
        _unconfirmedSpent = unconfirmedSpent,
        _balance = balance,
        _underConfirmed = underConfirmed,
        _excluded = excluded,
        _sapling = sapling,
        _orchard = orchard;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addUint64(0, _shielded);
    fbBuilder.addUint64(1, _unconfirmedSpent);
    fbBuilder.addUint64(2, _balance);
    fbBuilder.addUint64(3, _underConfirmed);
    fbBuilder.addUint64(4, _excluded);
    fbBuilder.addUint64(5, _sapling);
    fbBuilder.addUint64(6, _orchard);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Height {
  Height._(this._bc, this._bcOffset);
  factory Height(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Height> reader = _HeightReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Height{height: ${height}, timestamp: ${timestamp}}';
  }

  HeightT unpack() => HeightT(
      height: height,
      timestamp: timestamp);

  static int pack(fb.Builder fbBuilder, HeightT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class HeightT implements fb.Packable {
  int height;
  int timestamp;

  HeightT({
      this.height = 0,
      this.timestamp = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, height);
    fbBuilder.addUint32(1, timestamp);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'HeightT{height: ${height}, timestamp: ${timestamp}}';
  }
}

class _HeightReader extends fb.TableReader<Height> {
  const _HeightReader();

  @override
  Height createObject(fb.BufferContext bc, int offset) => 
    Height._(bc, offset);
}

class HeightBuilder {
  HeightBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHeight(int? height) {
    fbBuilder.addUint32(0, height);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(1, timestamp);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HeightObjectBuilder extends fb.ObjectBuilder {
  final int? _height;
  final int? _timestamp;

  HeightObjectBuilder({
    int? height,
    int? timestamp,
  })
      : _height = height,
        _timestamp = timestamp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _height);
    fbBuilder.addUint32(1, _timestamp);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ShieldedNote {
  ShieldedNote._(this._bc, this._bcOffset);
  factory ShieldedNote(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ShieldedNote> reader = _ShieldedNoteReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get value => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  bool get orchard => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  bool get excluded => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  bool get spent => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);

  @override
  String toString() {
    return 'ShieldedNote{id: ${id}, height: ${height}, value: ${value}, timestamp: ${timestamp}, orchard: ${orchard}, excluded: ${excluded}, spent: ${spent}}';
  }

  ShieldedNoteT unpack() => ShieldedNoteT(
      id: id,
      height: height,
      value: value,
      timestamp: timestamp,
      orchard: orchard,
      excluded: excluded,
      spent: spent);

  static int pack(fb.Builder fbBuilder, ShieldedNoteT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ShieldedNoteT implements fb.Packable {
  int id;
  int height;
  int value;
  int timestamp;
  bool orchard;
  bool excluded;
  bool spent;

  ShieldedNoteT({
      this.id = 0,
      this.height = 0,
      this.value = 0,
      this.timestamp = 0,
      this.orchard = false,
      this.excluded = false,
      this.spent = false});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addUint32(0, id);
    fbBuilder.addUint32(1, height);
    fbBuilder.addUint64(2, value);
    fbBuilder.addUint32(3, timestamp);
    fbBuilder.addBool(4, orchard);
    fbBuilder.addBool(5, excluded);
    fbBuilder.addBool(6, spent);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ShieldedNoteT{id: ${id}, height: ${height}, value: ${value}, timestamp: ${timestamp}, orchard: ${orchard}, excluded: ${excluded}, spent: ${spent}}';
  }
}

class _ShieldedNoteReader extends fb.TableReader<ShieldedNote> {
  const _ShieldedNoteReader();

  @override
  ShieldedNote createObject(fb.BufferContext bc, int offset) => 
    ShieldedNote._(bc, offset);
}

class ShieldedNoteBuilder {
  ShieldedNoteBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint32(1, height);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addUint64(2, value);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(3, timestamp);
    return fbBuilder.offset;
  }
  int addOrchard(bool? orchard) {
    fbBuilder.addBool(4, orchard);
    return fbBuilder.offset;
  }
  int addExcluded(bool? excluded) {
    fbBuilder.addBool(5, excluded);
    return fbBuilder.offset;
  }
  int addSpent(bool? spent) {
    fbBuilder.addBool(6, spent);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ShieldedNoteObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final int? _height;
  final int? _value;
  final int? _timestamp;
  final bool? _orchard;
  final bool? _excluded;
  final bool? _spent;

  ShieldedNoteObjectBuilder({
    int? id,
    int? height,
    int? value,
    int? timestamp,
    bool? orchard,
    bool? excluded,
    bool? spent,
  })
      : _id = id,
        _height = height,
        _value = value,
        _timestamp = timestamp,
        _orchard = orchard,
        _excluded = excluded,
        _spent = spent;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addUint32(1, _height);
    fbBuilder.addUint64(2, _value);
    fbBuilder.addUint32(3, _timestamp);
    fbBuilder.addBool(4, _orchard);
    fbBuilder.addBool(5, _excluded);
    fbBuilder.addBool(6, _spent);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ShieldedNoteVec {
  ShieldedNoteVec._(this._bc, this._bcOffset);
  factory ShieldedNoteVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ShieldedNoteVec> reader = _ShieldedNoteVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ShieldedNote>? get notes => const fb.ListReader<ShieldedNote>(ShieldedNote.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ShieldedNoteVec{notes: ${notes}}';
  }

  ShieldedNoteVecT unpack() => ShieldedNoteVecT(
      notes: notes?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, ShieldedNoteVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ShieldedNoteVecT implements fb.Packable {
  List<ShieldedNoteT>? notes;

  ShieldedNoteVecT({
      this.notes});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? notesOffset = notes == null ? null
        : fbBuilder.writeList(notes!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, notesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ShieldedNoteVecT{notes: ${notes}}';
  }
}

class _ShieldedNoteVecReader extends fb.TableReader<ShieldedNoteVec> {
  const _ShieldedNoteVecReader();

  @override
  ShieldedNoteVec createObject(fb.BufferContext bc, int offset) => 
    ShieldedNoteVec._(bc, offset);
}

class ShieldedNoteVecBuilder {
  ShieldedNoteVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ShieldedNoteVecObjectBuilder extends fb.ObjectBuilder {
  final List<ShieldedNoteObjectBuilder>? _notes;

  ShieldedNoteVecObjectBuilder({
    List<ShieldedNoteObjectBuilder>? notes,
  })
      : _notes = notes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeList(_notes!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, notesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ShieldedTx {
  ShieldedTx._(this._bc, this._bcOffset);
  factory ShieldedTx(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ShieldedTx> reader = _ShieldedTxReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get txId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get shortTxId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  int get value => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 16, 0);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get memo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);

  @override
  String toString() {
    return 'ShieldedTx{id: ${id}, txId: ${txId}, height: ${height}, shortTxId: ${shortTxId}, timestamp: ${timestamp}, name: ${name}, value: ${value}, address: ${address}, memo: ${memo}}';
  }

  ShieldedTxT unpack() => ShieldedTxT(
      id: id,
      txId: txId,
      height: height,
      shortTxId: shortTxId,
      timestamp: timestamp,
      name: name,
      value: value,
      address: address,
      memo: memo);

  static int pack(fb.Builder fbBuilder, ShieldedTxT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ShieldedTxT implements fb.Packable {
  int id;
  String? txId;
  int height;
  String? shortTxId;
  int timestamp;
  String? name;
  int value;
  String? address;
  String? memo;

  ShieldedTxT({
      this.id = 0,
      this.txId,
      this.height = 0,
      this.shortTxId,
      this.timestamp = 0,
      this.name,
      this.value = 0,
      this.address,
      this.memo});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? txIdOffset = txId == null ? null
        : fbBuilder.writeString(txId!);
    final int? shortTxIdOffset = shortTxId == null ? null
        : fbBuilder.writeString(shortTxId!);
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    final int? memoOffset = memo == null ? null
        : fbBuilder.writeString(memo!);
    fbBuilder.startTable(9);
    fbBuilder.addUint32(0, id);
    fbBuilder.addOffset(1, txIdOffset);
    fbBuilder.addUint32(2, height);
    fbBuilder.addOffset(3, shortTxIdOffset);
    fbBuilder.addUint32(4, timestamp);
    fbBuilder.addOffset(5, nameOffset);
    fbBuilder.addUint64(6, value);
    fbBuilder.addOffset(7, addressOffset);
    fbBuilder.addOffset(8, memoOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ShieldedTxT{id: ${id}, txId: ${txId}, height: ${height}, shortTxId: ${shortTxId}, timestamp: ${timestamp}, name: ${name}, value: ${value}, address: ${address}, memo: ${memo}}';
  }
}

class _ShieldedTxReader extends fb.TableReader<ShieldedTx> {
  const _ShieldedTxReader();

  @override
  ShieldedTx createObject(fb.BufferContext bc, int offset) => 
    ShieldedTx._(bc, offset);
}

class ShieldedTxBuilder {
  ShieldedTxBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addTxIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint32(2, height);
    return fbBuilder.offset;
  }
  int addShortTxIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(4, timestamp);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addUint64(6, value);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addMemoOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ShieldedTxObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _txId;
  final int? _height;
  final String? _shortTxId;
  final int? _timestamp;
  final String? _name;
  final int? _value;
  final String? _address;
  final String? _memo;

  ShieldedTxObjectBuilder({
    int? id,
    String? txId,
    int? height,
    String? shortTxId,
    int? timestamp,
    String? name,
    int? value,
    String? address,
    String? memo,
  })
      : _id = id,
        _txId = txId,
        _height = height,
        _shortTxId = shortTxId,
        _timestamp = timestamp,
        _name = name,
        _value = value,
        _address = address,
        _memo = memo;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? txIdOffset = _txId == null ? null
        : fbBuilder.writeString(_txId!);
    final int? shortTxIdOffset = _shortTxId == null ? null
        : fbBuilder.writeString(_shortTxId!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    final int? memoOffset = _memo == null ? null
        : fbBuilder.writeString(_memo!);
    fbBuilder.startTable(9);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, txIdOffset);
    fbBuilder.addUint32(2, _height);
    fbBuilder.addOffset(3, shortTxIdOffset);
    fbBuilder.addUint32(4, _timestamp);
    fbBuilder.addOffset(5, nameOffset);
    fbBuilder.addUint64(6, _value);
    fbBuilder.addOffset(7, addressOffset);
    fbBuilder.addOffset(8, memoOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ShieldedTxVec {
  ShieldedTxVec._(this._bc, this._bcOffset);
  factory ShieldedTxVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ShieldedTxVec> reader = _ShieldedTxVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ShieldedTx>? get txs => const fb.ListReader<ShieldedTx>(ShieldedTx.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ShieldedTxVec{txs: ${txs}}';
  }

  ShieldedTxVecT unpack() => ShieldedTxVecT(
      txs: txs?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, ShieldedTxVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ShieldedTxVecT implements fb.Packable {
  List<ShieldedTxT>? txs;

  ShieldedTxVecT({
      this.txs});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? txsOffset = txs == null ? null
        : fbBuilder.writeList(txs!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, txsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ShieldedTxVecT{txs: ${txs}}';
  }
}

class _ShieldedTxVecReader extends fb.TableReader<ShieldedTxVec> {
  const _ShieldedTxVecReader();

  @override
  ShieldedTxVec createObject(fb.BufferContext bc, int offset) => 
    ShieldedTxVec._(bc, offset);
}

class ShieldedTxVecBuilder {
  ShieldedTxVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addTxsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ShieldedTxVecObjectBuilder extends fb.ObjectBuilder {
  final List<ShieldedTxObjectBuilder>? _txs;

  ShieldedTxVecObjectBuilder({
    List<ShieldedTxObjectBuilder>? txs,
  })
      : _txs = txs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? txsOffset = _txs == null ? null
        : fbBuilder.writeList(_txs!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, txsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Message {
  Message._(this._bc, this._bcOffset);
  factory Message(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Message> reader = _MessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get idMsg => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get idTx => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  String? get from => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get to => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get subject => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get body => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  bool get read => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  bool get incoming => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);

  @override
  String toString() {
    return 'Message{idMsg: ${idMsg}, idTx: ${idTx}, height: ${height}, timestamp: ${timestamp}, from: ${from}, to: ${to}, subject: ${subject}, body: ${body}, read: ${read}, incoming: ${incoming}}';
  }

  MessageT unpack() => MessageT(
      idMsg: idMsg,
      idTx: idTx,
      height: height,
      timestamp: timestamp,
      from: from,
      to: to,
      subject: subject,
      body: body,
      read: read,
      incoming: incoming);

  static int pack(fb.Builder fbBuilder, MessageT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MessageT implements fb.Packable {
  int idMsg;
  int idTx;
  int height;
  int timestamp;
  String? from;
  String? to;
  String? subject;
  String? body;
  bool read;
  bool incoming;

  MessageT({
      this.idMsg = 0,
      this.idTx = 0,
      this.height = 0,
      this.timestamp = 0,
      this.from,
      this.to,
      this.subject,
      this.body,
      this.read = false,
      this.incoming = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? fromOffset = from == null ? null
        : fbBuilder.writeString(from!);
    final int? toOffset = to == null ? null
        : fbBuilder.writeString(to!);
    final int? subjectOffset = subject == null ? null
        : fbBuilder.writeString(subject!);
    final int? bodyOffset = body == null ? null
        : fbBuilder.writeString(body!);
    fbBuilder.startTable(10);
    fbBuilder.addUint32(0, idMsg);
    fbBuilder.addUint32(1, idTx);
    fbBuilder.addUint32(2, height);
    fbBuilder.addUint32(3, timestamp);
    fbBuilder.addOffset(4, fromOffset);
    fbBuilder.addOffset(5, toOffset);
    fbBuilder.addOffset(6, subjectOffset);
    fbBuilder.addOffset(7, bodyOffset);
    fbBuilder.addBool(8, read);
    fbBuilder.addBool(9, incoming);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MessageT{idMsg: ${idMsg}, idTx: ${idTx}, height: ${height}, timestamp: ${timestamp}, from: ${from}, to: ${to}, subject: ${subject}, body: ${body}, read: ${read}, incoming: ${incoming}}';
  }
}

class _MessageReader extends fb.TableReader<Message> {
  const _MessageReader();

  @override
  Message createObject(fb.BufferContext bc, int offset) => 
    Message._(bc, offset);
}

class MessageBuilder {
  MessageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addIdMsg(int? idMsg) {
    fbBuilder.addUint32(0, idMsg);
    return fbBuilder.offset;
  }
  int addIdTx(int? idTx) {
    fbBuilder.addUint32(1, idTx);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint32(2, height);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(3, timestamp);
    return fbBuilder.offset;
  }
  int addFromOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addToOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSubjectOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addBodyOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addRead(bool? read) {
    fbBuilder.addBool(8, read);
    return fbBuilder.offset;
  }
  int addIncoming(bool? incoming) {
    fbBuilder.addBool(9, incoming);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageObjectBuilder extends fb.ObjectBuilder {
  final int? _idMsg;
  final int? _idTx;
  final int? _height;
  final int? _timestamp;
  final String? _from;
  final String? _to;
  final String? _subject;
  final String? _body;
  final bool? _read;
  final bool? _incoming;

  MessageObjectBuilder({
    int? idMsg,
    int? idTx,
    int? height,
    int? timestamp,
    String? from,
    String? to,
    String? subject,
    String? body,
    bool? read,
    bool? incoming,
  })
      : _idMsg = idMsg,
        _idTx = idTx,
        _height = height,
        _timestamp = timestamp,
        _from = from,
        _to = to,
        _subject = subject,
        _body = body,
        _read = read,
        _incoming = incoming;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? fromOffset = _from == null ? null
        : fbBuilder.writeString(_from!);
    final int? toOffset = _to == null ? null
        : fbBuilder.writeString(_to!);
    final int? subjectOffset = _subject == null ? null
        : fbBuilder.writeString(_subject!);
    final int? bodyOffset = _body == null ? null
        : fbBuilder.writeString(_body!);
    fbBuilder.startTable(10);
    fbBuilder.addUint32(0, _idMsg);
    fbBuilder.addUint32(1, _idTx);
    fbBuilder.addUint32(2, _height);
    fbBuilder.addUint32(3, _timestamp);
    fbBuilder.addOffset(4, fromOffset);
    fbBuilder.addOffset(5, toOffset);
    fbBuilder.addOffset(6, subjectOffset);
    fbBuilder.addOffset(7, bodyOffset);
    fbBuilder.addBool(8, _read);
    fbBuilder.addBool(9, _incoming);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageVec {
  MessageVec._(this._bc, this._bcOffset);
  factory MessageVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageVec> reader = _MessageVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Message>? get messages => const fb.ListReader<Message>(Message.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'MessageVec{messages: ${messages}}';
  }

  MessageVecT unpack() => MessageVecT(
      messages: messages?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, MessageVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MessageVecT implements fb.Packable {
  List<MessageT>? messages;

  MessageVecT({
      this.messages});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? messagesOffset = messages == null ? null
        : fbBuilder.writeList(messages!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, messagesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MessageVecT{messages: ${messages}}';
  }
}

class _MessageVecReader extends fb.TableReader<MessageVec> {
  const _MessageVecReader();

  @override
  MessageVec createObject(fb.BufferContext bc, int offset) => 
    MessageVec._(bc, offset);
}

class MessageVecBuilder {
  MessageVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMessagesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageVecObjectBuilder extends fb.ObjectBuilder {
  final List<MessageObjectBuilder>? _messages;

  MessageVecObjectBuilder({
    List<MessageObjectBuilder>? messages,
  })
      : _messages = messages;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messagesOffset = _messages == null ? null
        : fbBuilder.writeList(_messages!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, messagesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PrevNext {
  PrevNext._(this._bc, this._bcOffset);
  factory PrevNext(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PrevNext> reader = _PrevNextReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get prev => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get next => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'PrevNext{prev: ${prev}, next: ${next}}';
  }

  PrevNextT unpack() => PrevNextT(
      prev: prev,
      next: next);

  static int pack(fb.Builder fbBuilder, PrevNextT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PrevNextT implements fb.Packable {
  int prev;
  int next;

  PrevNextT({
      this.prev = 0,
      this.next = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, prev);
    fbBuilder.addUint32(1, next);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PrevNextT{prev: ${prev}, next: ${next}}';
  }
}

class _PrevNextReader extends fb.TableReader<PrevNext> {
  const _PrevNextReader();

  @override
  PrevNext createObject(fb.BufferContext bc, int offset) => 
    PrevNext._(bc, offset);
}

class PrevNextBuilder {
  PrevNextBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPrev(int? prev) {
    fbBuilder.addUint32(0, prev);
    return fbBuilder.offset;
  }
  int addNext(int? next) {
    fbBuilder.addUint32(1, next);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PrevNextObjectBuilder extends fb.ObjectBuilder {
  final int? _prev;
  final int? _next;

  PrevNextObjectBuilder({
    int? prev,
    int? next,
  })
      : _prev = prev,
        _next = next;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _prev);
    fbBuilder.addUint32(1, _next);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SendTemplate {
  SendTemplate._(this._bc, this._bcOffset);
  factory SendTemplate(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SendTemplate> reader = _SendTemplateReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get amount => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  double get fiatAmount => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  bool get feeIncluded => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  String? get fiat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  bool get includeReplyTo => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  String? get subject => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  String? get body => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'SendTemplate{id: ${id}, title: ${title}, address: ${address}, amount: ${amount}, fiatAmount: ${fiatAmount}, feeIncluded: ${feeIncluded}, fiat: ${fiat}, includeReplyTo: ${includeReplyTo}, subject: ${subject}, body: ${body}}';
  }

  SendTemplateT unpack() => SendTemplateT(
      id: id,
      title: title,
      address: address,
      amount: amount,
      fiatAmount: fiatAmount,
      feeIncluded: feeIncluded,
      fiat: fiat,
      includeReplyTo: includeReplyTo,
      subject: subject,
      body: body);

  static int pack(fb.Builder fbBuilder, SendTemplateT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SendTemplateT implements fb.Packable {
  int id;
  String? title;
  String? address;
  int amount;
  double fiatAmount;
  bool feeIncluded;
  String? fiat;
  bool includeReplyTo;
  String? subject;
  String? body;

  SendTemplateT({
      this.id = 0,
      this.title,
      this.address,
      this.amount = 0,
      this.fiatAmount = 0.0,
      this.feeIncluded = false,
      this.fiat,
      this.includeReplyTo = false,
      this.subject,
      this.body});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? titleOffset = title == null ? null
        : fbBuilder.writeString(title!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    final int? fiatOffset = fiat == null ? null
        : fbBuilder.writeString(fiat!);
    final int? subjectOffset = subject == null ? null
        : fbBuilder.writeString(subject!);
    final int? bodyOffset = body == null ? null
        : fbBuilder.writeString(body!);
    fbBuilder.startTable(10);
    fbBuilder.addUint32(0, id);
    fbBuilder.addOffset(1, titleOffset);
    fbBuilder.addOffset(2, addressOffset);
    fbBuilder.addUint64(3, amount);
    fbBuilder.addFloat64(4, fiatAmount);
    fbBuilder.addBool(5, feeIncluded);
    fbBuilder.addOffset(6, fiatOffset);
    fbBuilder.addBool(7, includeReplyTo);
    fbBuilder.addOffset(8, subjectOffset);
    fbBuilder.addOffset(9, bodyOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SendTemplateT{id: ${id}, title: ${title}, address: ${address}, amount: ${amount}, fiatAmount: ${fiatAmount}, feeIncluded: ${feeIncluded}, fiat: ${fiat}, includeReplyTo: ${includeReplyTo}, subject: ${subject}, body: ${body}}';
  }
}

class _SendTemplateReader extends fb.TableReader<SendTemplate> {
  const _SendTemplateReader();

  @override
  SendTemplate createObject(fb.BufferContext bc, int offset) => 
    SendTemplate._(bc, offset);
}

class SendTemplateBuilder {
  SendTemplateBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addUint64(3, amount);
    return fbBuilder.offset;
  }
  int addFiatAmount(double? fiatAmount) {
    fbBuilder.addFloat64(4, fiatAmount);
    return fbBuilder.offset;
  }
  int addFeeIncluded(bool? feeIncluded) {
    fbBuilder.addBool(5, feeIncluded);
    return fbBuilder.offset;
  }
  int addFiatOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIncludeReplyTo(bool? includeReplyTo) {
    fbBuilder.addBool(7, includeReplyTo);
    return fbBuilder.offset;
  }
  int addSubjectOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addBodyOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SendTemplateObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _title;
  final String? _address;
  final int? _amount;
  final double? _fiatAmount;
  final bool? _feeIncluded;
  final String? _fiat;
  final bool? _includeReplyTo;
  final String? _subject;
  final String? _body;

  SendTemplateObjectBuilder({
    int? id,
    String? title,
    String? address,
    int? amount,
    double? fiatAmount,
    bool? feeIncluded,
    String? fiat,
    bool? includeReplyTo,
    String? subject,
    String? body,
  })
      : _id = id,
        _title = title,
        _address = address,
        _amount = amount,
        _fiatAmount = fiatAmount,
        _feeIncluded = feeIncluded,
        _fiat = fiat,
        _includeReplyTo = includeReplyTo,
        _subject = subject,
        _body = body;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    final int? fiatOffset = _fiat == null ? null
        : fbBuilder.writeString(_fiat!);
    final int? subjectOffset = _subject == null ? null
        : fbBuilder.writeString(_subject!);
    final int? bodyOffset = _body == null ? null
        : fbBuilder.writeString(_body!);
    fbBuilder.startTable(10);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, titleOffset);
    fbBuilder.addOffset(2, addressOffset);
    fbBuilder.addUint64(3, _amount);
    fbBuilder.addFloat64(4, _fiatAmount);
    fbBuilder.addBool(5, _feeIncluded);
    fbBuilder.addOffset(6, fiatOffset);
    fbBuilder.addBool(7, _includeReplyTo);
    fbBuilder.addOffset(8, subjectOffset);
    fbBuilder.addOffset(9, bodyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SendTemplateVec {
  SendTemplateVec._(this._bc, this._bcOffset);
  factory SendTemplateVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SendTemplateVec> reader = _SendTemplateVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<SendTemplate>? get templates => const fb.ListReader<SendTemplate>(SendTemplate.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SendTemplateVec{templates: ${templates}}';
  }

  SendTemplateVecT unpack() => SendTemplateVecT(
      templates: templates?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, SendTemplateVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SendTemplateVecT implements fb.Packable {
  List<SendTemplateT>? templates;

  SendTemplateVecT({
      this.templates});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? templatesOffset = templates == null ? null
        : fbBuilder.writeList(templates!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, templatesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SendTemplateVecT{templates: ${templates}}';
  }
}

class _SendTemplateVecReader extends fb.TableReader<SendTemplateVec> {
  const _SendTemplateVecReader();

  @override
  SendTemplateVec createObject(fb.BufferContext bc, int offset) => 
    SendTemplateVec._(bc, offset);
}

class SendTemplateVecBuilder {
  SendTemplateVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addTemplatesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SendTemplateVecObjectBuilder extends fb.ObjectBuilder {
  final List<SendTemplateObjectBuilder>? _templates;

  SendTemplateVecObjectBuilder({
    List<SendTemplateObjectBuilder>? templates,
  })
      : _templates = templates;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? templatesOffset = _templates == null ? null
        : fbBuilder.writeList(_templates!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, templatesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Contact {
  Contact._(this._bc, this._bcOffset);
  factory Contact(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Contact> reader = _ContactReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Contact{id: ${id}, name: ${name}, address: ${address}}';
  }

  ContactT unpack() => ContactT(
      id: id,
      name: name,
      address: address);

  static int pack(fb.Builder fbBuilder, ContactT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContactT implements fb.Packable {
  int id;
  String? name;
  String? address;

  ContactT({
      this.id = 0,
      this.name,
      this.address});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, id);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, addressOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContactT{id: ${id}, name: ${name}, address: ${address}}';
  }
}

class _ContactReader extends fb.TableReader<Contact> {
  const _ContactReader();

  @override
  Contact createObject(fb.BufferContext bc, int offset) => 
    Contact._(bc, offset);
}

class ContactBuilder {
  ContactBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContactObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _name;
  final String? _address;

  ContactObjectBuilder({
    int? id,
    String? name,
    String? address,
  })
      : _id = id,
        _name = name,
        _address = address;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, addressOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContactVec {
  ContactVec._(this._bc, this._bcOffset);
  factory ContactVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContactVec> reader = _ContactVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Contact>? get contacts => const fb.ListReader<Contact>(Contact.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ContactVec{contacts: ${contacts}}';
  }

  ContactVecT unpack() => ContactVecT(
      contacts: contacts?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, ContactVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContactVecT implements fb.Packable {
  List<ContactT>? contacts;

  ContactVecT({
      this.contacts});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? contactsOffset = contacts == null ? null
        : fbBuilder.writeList(contacts!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, contactsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContactVecT{contacts: ${contacts}}';
  }
}

class _ContactVecReader extends fb.TableReader<ContactVec> {
  const _ContactVecReader();

  @override
  ContactVec createObject(fb.BufferContext bc, int offset) => 
    ContactVec._(bc, offset);
}

class ContactVecBuilder {
  ContactVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addContactsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContactVecObjectBuilder extends fb.ObjectBuilder {
  final List<ContactObjectBuilder>? _contacts;

  ContactVecObjectBuilder({
    List<ContactObjectBuilder>? contacts,
  })
      : _contacts = contacts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? contactsOffset = _contacts == null ? null
        : fbBuilder.writeList(_contacts!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, contactsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TxTimeValue {
  TxTimeValue._(this._bc, this._bcOffset);
  factory TxTimeValue(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TxTimeValue> reader = _TxTimeValueReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get value => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'TxTimeValue{timestamp: ${timestamp}, value: ${value}}';
  }

  TxTimeValueT unpack() => TxTimeValueT(
      timestamp: timestamp,
      value: value);

  static int pack(fb.Builder fbBuilder, TxTimeValueT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TxTimeValueT implements fb.Packable {
  int timestamp;
  int value;

  TxTimeValueT({
      this.timestamp = 0,
      this.value = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, timestamp);
    fbBuilder.addUint64(1, value);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TxTimeValueT{timestamp: ${timestamp}, value: ${value}}';
  }
}

class _TxTimeValueReader extends fb.TableReader<TxTimeValue> {
  const _TxTimeValueReader();

  @override
  TxTimeValue createObject(fb.BufferContext bc, int offset) => 
    TxTimeValue._(bc, offset);
}

class TxTimeValueBuilder {
  TxTimeValueBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(0, timestamp);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addUint64(1, value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TxTimeValueObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final int? _value;

  TxTimeValueObjectBuilder({
    int? timestamp,
    int? value,
  })
      : _timestamp = timestamp,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _timestamp);
    fbBuilder.addUint64(1, _value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TxTimeValueVec {
  TxTimeValueVec._(this._bc, this._bcOffset);
  factory TxTimeValueVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TxTimeValueVec> reader = _TxTimeValueVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<TxTimeValue>? get values => const fb.ListReader<TxTimeValue>(TxTimeValue.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'TxTimeValueVec{values: ${values}}';
  }

  TxTimeValueVecT unpack() => TxTimeValueVecT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, TxTimeValueVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TxTimeValueVecT implements fb.Packable {
  List<TxTimeValueT>? values;

  TxTimeValueVecT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TxTimeValueVecT{values: ${values}}';
  }
}

class _TxTimeValueVecReader extends fb.TableReader<TxTimeValueVec> {
  const _TxTimeValueVecReader();

  @override
  TxTimeValueVec createObject(fb.BufferContext bc, int offset) => 
    TxTimeValueVec._(bc, offset);
}

class TxTimeValueVecBuilder {
  TxTimeValueVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TxTimeValueVecObjectBuilder extends fb.ObjectBuilder {
  final List<TxTimeValueObjectBuilder>? _values;

  TxTimeValueVecObjectBuilder({
    List<TxTimeValueObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Quote {
  Quote._(this._bc, this._bcOffset);
  factory Quote(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Quote> reader = _QuoteReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  double get price => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);

  @override
  String toString() {
    return 'Quote{timestamp: ${timestamp}, price: ${price}}';
  }

  QuoteT unpack() => QuoteT(
      timestamp: timestamp,
      price: price);

  static int pack(fb.Builder fbBuilder, QuoteT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class QuoteT implements fb.Packable {
  int timestamp;
  double price;

  QuoteT({
      this.timestamp = 0,
      this.price = 0.0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, timestamp);
    fbBuilder.addFloat64(1, price);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'QuoteT{timestamp: ${timestamp}, price: ${price}}';
  }
}

class _QuoteReader extends fb.TableReader<Quote> {
  const _QuoteReader();

  @override
  Quote createObject(fb.BufferContext bc, int offset) => 
    Quote._(bc, offset);
}

class QuoteBuilder {
  QuoteBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(0, timestamp);
    return fbBuilder.offset;
  }
  int addPrice(double? price) {
    fbBuilder.addFloat64(1, price);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class QuoteObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final double? _price;

  QuoteObjectBuilder({
    int? timestamp,
    double? price,
  })
      : _timestamp = timestamp,
        _price = price;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _timestamp);
    fbBuilder.addFloat64(1, _price);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class QuoteVec {
  QuoteVec._(this._bc, this._bcOffset);
  factory QuoteVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<QuoteVec> reader = _QuoteVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Quote>? get values => const fb.ListReader<Quote>(Quote.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'QuoteVec{values: ${values}}';
  }

  QuoteVecT unpack() => QuoteVecT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, QuoteVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class QuoteVecT implements fb.Packable {
  List<QuoteT>? values;

  QuoteVecT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'QuoteVecT{values: ${values}}';
  }
}

class _QuoteVecReader extends fb.TableReader<QuoteVec> {
  const _QuoteVecReader();

  @override
  QuoteVec createObject(fb.BufferContext bc, int offset) => 
    QuoteVec._(bc, offset);
}

class QuoteVecBuilder {
  QuoteVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class QuoteVecObjectBuilder extends fb.ObjectBuilder {
  final List<QuoteObjectBuilder>? _values;

  QuoteVecObjectBuilder({
    List<QuoteObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Spending {
  Spending._(this._bc, this._bcOffset);
  factory Spending(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Spending> reader = _SpendingReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get recipient => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get amount => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Spending{recipient: ${recipient}, amount: ${amount}}';
  }

  SpendingT unpack() => SpendingT(
      recipient: recipient,
      amount: amount);

  static int pack(fb.Builder fbBuilder, SpendingT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SpendingT implements fb.Packable {
  String? recipient;
  int amount;

  SpendingT({
      this.recipient,
      this.amount = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? recipientOffset = recipient == null ? null
        : fbBuilder.writeString(recipient!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, recipientOffset);
    fbBuilder.addUint64(1, amount);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SpendingT{recipient: ${recipient}, amount: ${amount}}';
  }
}

class _SpendingReader extends fb.TableReader<Spending> {
  const _SpendingReader();

  @override
  Spending createObject(fb.BufferContext bc, int offset) => 
    Spending._(bc, offset);
}

class SpendingBuilder {
  SpendingBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addRecipientOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addUint64(1, amount);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SpendingObjectBuilder extends fb.ObjectBuilder {
  final String? _recipient;
  final int? _amount;

  SpendingObjectBuilder({
    String? recipient,
    int? amount,
  })
      : _recipient = recipient,
        _amount = amount;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? recipientOffset = _recipient == null ? null
        : fbBuilder.writeString(_recipient!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, recipientOffset);
    fbBuilder.addUint64(1, _amount);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SpendingVec {
  SpendingVec._(this._bc, this._bcOffset);
  factory SpendingVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SpendingVec> reader = _SpendingVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Spending>? get values => const fb.ListReader<Spending>(Spending.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SpendingVec{values: ${values}}';
  }

  SpendingVecT unpack() => SpendingVecT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, SpendingVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SpendingVecT implements fb.Packable {
  List<SpendingT>? values;

  SpendingVecT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SpendingVecT{values: ${values}}';
  }
}

class _SpendingVecReader extends fb.TableReader<SpendingVec> {
  const _SpendingVecReader();

  @override
  SpendingVec createObject(fb.BufferContext bc, int offset) => 
    SpendingVec._(bc, offset);
}

class SpendingVecBuilder {
  SpendingVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SpendingVecObjectBuilder extends fb.ObjectBuilder {
  final List<SpendingObjectBuilder>? _values;

  SpendingVecObjectBuilder({
    List<SpendingObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AddressBalance {
  AddressBalance._(this._bc, this._bcOffset);
  factory AddressBalance(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AddressBalance> reader = _AddressBalanceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get index => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get balance => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'AddressBalance{index: ${index}, address: ${address}, balance: ${balance}}';
  }

  AddressBalanceT unpack() => AddressBalanceT(
      index: index,
      address: address,
      balance: balance);

  static int pack(fb.Builder fbBuilder, AddressBalanceT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AddressBalanceT implements fb.Packable {
  int index;
  String? address;
  int balance;

  AddressBalanceT({
      this.index = 0,
      this.address,
      this.balance = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, index);
    fbBuilder.addOffset(1, addressOffset);
    fbBuilder.addUint64(2, balance);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AddressBalanceT{index: ${index}, address: ${address}, balance: ${balance}}';
  }
}

class _AddressBalanceReader extends fb.TableReader<AddressBalance> {
  const _AddressBalanceReader();

  @override
  AddressBalance createObject(fb.BufferContext bc, int offset) => 
    AddressBalance._(bc, offset);
}

class AddressBalanceBuilder {
  AddressBalanceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addIndex(int? index) {
    fbBuilder.addUint32(0, index);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addBalance(int? balance) {
    fbBuilder.addUint64(2, balance);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AddressBalanceObjectBuilder extends fb.ObjectBuilder {
  final int? _index;
  final String? _address;
  final int? _balance;

  AddressBalanceObjectBuilder({
    int? index,
    String? address,
    int? balance,
  })
      : _index = index,
        _address = address,
        _balance = balance;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, _index);
    fbBuilder.addOffset(1, addressOffset);
    fbBuilder.addUint64(2, _balance);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AddressBalanceVec {
  AddressBalanceVec._(this._bc, this._bcOffset);
  factory AddressBalanceVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AddressBalanceVec> reader = _AddressBalanceVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<AddressBalance>? get values => const fb.ListReader<AddressBalance>(AddressBalance.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'AddressBalanceVec{values: ${values}}';
  }

  AddressBalanceVecT unpack() => AddressBalanceVecT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, AddressBalanceVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AddressBalanceVecT implements fb.Packable {
  List<AddressBalanceT>? values;

  AddressBalanceVecT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AddressBalanceVecT{values: ${values}}';
  }
}

class _AddressBalanceVecReader extends fb.TableReader<AddressBalanceVec> {
  const _AddressBalanceVecReader();

  @override
  AddressBalanceVec createObject(fb.BufferContext bc, int offset) => 
    AddressBalanceVec._(bc, offset);
}

class AddressBalanceVecBuilder {
  AddressBalanceVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AddressBalanceVecObjectBuilder extends fb.ObjectBuilder {
  final List<AddressBalanceObjectBuilder>? _values;

  AddressBalanceVecObjectBuilder({
    List<AddressBalanceObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Checkpoint {
  Checkpoint._(this._bc, this._bcOffset);
  factory Checkpoint(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Checkpoint> reader = _CheckpointReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Checkpoint{height: ${height}, timestamp: ${timestamp}}';
  }

  CheckpointT unpack() => CheckpointT(
      height: height,
      timestamp: timestamp);

  static int pack(fb.Builder fbBuilder, CheckpointT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class CheckpointT implements fb.Packable {
  int height;
  int timestamp;

  CheckpointT({
      this.height = 0,
      this.timestamp = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, height);
    fbBuilder.addUint32(1, timestamp);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'CheckpointT{height: ${height}, timestamp: ${timestamp}}';
  }
}

class _CheckpointReader extends fb.TableReader<Checkpoint> {
  const _CheckpointReader();

  @override
  Checkpoint createObject(fb.BufferContext bc, int offset) => 
    Checkpoint._(bc, offset);
}

class CheckpointBuilder {
  CheckpointBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHeight(int? height) {
    fbBuilder.addUint32(0, height);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(1, timestamp);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CheckpointObjectBuilder extends fb.ObjectBuilder {
  final int? _height;
  final int? _timestamp;

  CheckpointObjectBuilder({
    int? height,
    int? timestamp,
  })
      : _height = height,
        _timestamp = timestamp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _height);
    fbBuilder.addUint32(1, _timestamp);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CheckpointVec {
  CheckpointVec._(this._bc, this._bcOffset);
  factory CheckpointVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CheckpointVec> reader = _CheckpointVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Checkpoint>? get values => const fb.ListReader<Checkpoint>(Checkpoint.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'CheckpointVec{values: ${values}}';
  }

  CheckpointVecT unpack() => CheckpointVecT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, CheckpointVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class CheckpointVecT implements fb.Packable {
  List<CheckpointT>? values;

  CheckpointVecT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'CheckpointVecT{values: ${values}}';
  }
}

class _CheckpointVecReader extends fb.TableReader<CheckpointVec> {
  const _CheckpointVecReader();

  @override
  CheckpointVec createObject(fb.BufferContext bc, int offset) => 
    CheckpointVec._(bc, offset);
}

class CheckpointVecBuilder {
  CheckpointVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CheckpointVecObjectBuilder extends fb.ObjectBuilder {
  final List<CheckpointObjectBuilder>? _values;

  CheckpointVecObjectBuilder({
    List<CheckpointObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
